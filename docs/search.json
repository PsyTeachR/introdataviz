[{"path":"index.html","id":"overview","chapter":"Overview","heading":"Overview","text":"addition benefiting reproducibility transparency, one advantages using R researchers much larger range fully customisable data visualisations options typically available point--click software, due open-source nature R. visualisation options look attractive, can increase transparency distribution underlying data rather relying commonly used visualisations aggregations bar charts means.tutorial, provide practical introduction data visualisation using R, specifically aimed researchers little prior experience using R. First detail rationale using R data visualisation introduce \"grammar graphics\" underlies data visualisation using ggplot2 package. tutorial walks reader replicate plots commonly available point--click software histograms boxplots, well showing code \"basic\" plots can easily extended less commonly available options violin-boxplots.dataset code used tutorial available https://osf.io/bj83f/ whilst interactive version tutorial available https://psyteachr.github.io/introdataviz/ includes solutions activities appendix additional resources advanced plotting options.","code":""},{"path":"index.html","id":"citing","chapter":"Overview","heading":"0.1 Citing","text":"manuscript tutorial submitted publication, however, yet undergone peer-review. Please note tutorial likely undergo changes accepted publication encourage check updates citing.Please cite preprint interactive online tutorial :Nordmann, E., McAleer, P., Toivo, W., Paterson, H. & DeBruine, L. (2021). Data visualisation using R, researchers use R. Preprint. https://doi.org/10.31234/osf.io/4huvw","code":""},{"path":"introduction.html","id":"introduction","chapter":"1 Introduction","heading":"1 Introduction","text":"Use programming language R (R Core Team, 2021) data processing statistical analysis researchers increasingly common, average yearly growth 87% number citations R Core Team 2006-2018 (Barrett, 2019). addition benefiting reproducibility transparency, one advantages using R researchers much larger range fully customisable data visualisation options typically available point--click software, due open-source nature R. visualisation options look attractive, can increase transparency distribution underlying data rather relying commonly used visualisations aggregations bar charts means (Newman & Scholl, 2012).Yet, benefits using R obscured many researchers perception coding skills difficult learn (Robins et al., 2003). Coupled , minority psychology programmes currently teach coding skills (Wills, n.d.) majority undergraduate postgraduate courses using proprietary point--click software SAS, SPSS Microsoft Excel. sophisticated use proprietary software often necessitates use computational thinking skills akin coding (instance SPSS scripts formulas Excel), found many researchers perceive already introductory coding skills. following tutorial intend change perception showing experienced researchers can redevelop existing computational skills utilise powerful data visualisation tools offered R.tutorial provide practical introduction data visualisation using R, specifically aimed researchers little prior experience using R. First detail rationale using R data visualisation introduce \"grammar graphics\" underlies data visualisation using ggplot2 package. tutorial walks reader replicate plots commonly available point--click software histograms boxplots, well showing code \"basic\" plots can easily extended less commonly available options violin-boxplots.","code":""},{"path":"introduction.html","id":"why-r-for-data-visualisation","chapter":"1 Introduction","heading":"1.1 Why R for data visualisation?","text":"Data visualisation benefits advantages statistical analysis writing code rather using point--click software -- reproducibility transparency. need psychological researchers work reproducible ways well-documented discussed response replication crisis (e.g. Munafò et al., 2017) repeat arguments . However, additional benefit reproducibility less frequently acknowledged compared loftier goals improving psychological science: write code produce plots, can reuse adapt code future rather starting scratch time.addition benefits reproducibility, using R data visualisation gives researcher almost total control element plot. Whilst flexibility can seem daunting first, ability write reusable code recipes (use recipes created others) highly advantageous. level customisation professional outputs available using R , instance, lead news outlets BBC (Visual & Journalism, 2019) New York Times (Bertini & Stefaner, 2015) adopt R preferred data visualisation tool.","code":""},{"path":"introduction.html","id":"a-layered-grammar-of-graphics","chapter":"1 Introduction","heading":"1.2 A layered grammar of graphics","text":"multiple approaches data visualisation R; paper use popular package1 ggplot2 (Wickham, 2016) part larger tidyverse2 (Wickham, 2017) collection packages provide functions data wrangling, descriptives, visualisation. grammar graphics (Wilkinson et al., 2005) standardised way describe components graphic. ggplot2 uses layered grammar graphics (Wickham, 2010), plots built series layers. may helpful think picture multiple elements sit semi-transparently . good analogy old Disney movies artists create background add moveable elements top background via transparencies.Figure 1.1 displays evolution simple scatterplot using layered approach. First, plot space built (layer 1); variables specified (layer 2); type visualisation (known geom) desired variables specified (layer 3) - case geom_point() called visualise individual data points; second geom added include line best fit (layer 4), axis labels edited readability (layer 5), finally, theme applied change overall appearance plot (layer 6).\nFigure 1.1: Evolution layered plot\nImportantly, layer independent independently customisable. example, size, colour position component can adjusted, one , example, remove first geom (data points) visualise line best fit, simply removing layer draws data points (Figure 1.2). use layers makes easy build complex plots step--step, adapt extend plots existing code.\nFigure 1.2: Plot scatterplot layer removed.\n","code":""},{"path":"introduction.html","id":"tutorial-components","chapter":"1 Introduction","heading":"1.3 Tutorial components","text":"tutorial contains three components.traditional PDF manuscript can easily saved, printed, cited.online version tutorial published https://psyteachr.github.io/introdataviz/ may easier copy paste code also provides optional activity solutions well additional appendices, including code tutorials advanced plots beyond scope paper links additional resources.Open Science Framework repository published https://osf.io/bj83f/ contains simulated dataset (see ), preprint, R Markdown workbook.","code":""},{"path":"introduction.html","id":"simulated-dataset","chapter":"1 Introduction","heading":"1.4 Simulated dataset","text":"purpose tutorial, use simulated data 2 x 2 mixed-design lexical decision task 100 participants must decide whether presented word real word non-word. 100 rows (1 participant) 7 variables:Participant information:\nid: Participant ID\nage: Age\nParticipant information:id: Participant IDage: Age1 -subject independent variable (IV):\nlanguage: Language group (1 = monolingual, 2 = bilingual)\n1 -subject independent variable (IV):language: Language group (1 = monolingual, 2 = bilingual)4 columns 2 dependent variables (DVs) RT accuracy, crossed within-subject IV condition:\nrt_word: Reaction time (ms) word trials\nrt_nonword: Reaction time (ms) non-word trials\nacc_word: Accuracy word trials\nacc_nonword: Accuracy non-word trials\n4 columns 2 dependent variables (DVs) RT accuracy, crossed within-subject IV condition:rt_word: Reaction time (ms) word trialsrt_nonword: Reaction time (ms) non-word trialsacc_word: Accuracy word trialsacc_nonword: Accuracy non-word trialsFor newcomers R, suggest working tutorial simulated dataset, extending code datasets similar structure, finally generalising code new structures problems.","code":""},{"path":"introduction.html","id":"setting-up-r-and-rstudio","chapter":"1 Introduction","heading":"1.5 Setting up R and RStudio","text":"strongly encourage use RStudio (RStudio Team, 2021) write code R. R programming language whilst RStudio integrated development environment makes working R easier. information installing R RStudio can found additional resources.Projects useful way keeping code, data, output one place. create new project, open RStudio click File - New Project - New Directory - New Project. prompted give project name, select location store project computer. done , click Create Project. Download simulated dataset code tutorial Rmd file online materials (ldt_data.csv, workbook.Rmd) move folder. files pane bottom right RStudio now display folder files contains - known working directory R look data wish import save output create.tutorial require use packages tidyverse collection. Additionally, also require use patchwork. install packages, copy paste code console (left hand pane) press enter execute code.R Markdown workbook available online materials contains code tutorial information links additional resources use R Markdown reproducible reports additional resources.reason code included workbook every time run install command code install latest version package. Leaving code script can lead unintentionally install package update want. reason, avoid including install code script Markdown document.information use R RStudio, please see additional resources online appendices.","code":"\n# only run in the console, never put this in a script \npackage_list <- c(\"tidyverse\", \"patchwork\")\ninstall.packages(package_list)"},{"path":"introduction.html","id":"preparing-your-data","chapter":"1 Introduction","heading":"1.6 Preparing your data","text":"start visualising data, must appropriate format. preparatory steps can dealt reproducibly using R additional resources section points extra tutorials . However, performing types tasks R can require sophisticated coding skills solutions tools dependent idiosyncrasies dataset. reason, tutorial encourage reader complete data preparation steps using method comfortable focus aim data visualisation.","code":""},{"path":"introduction.html","id":"data-format","chapter":"1 Introduction","heading":"1.6.1 Data format","text":"simulated lexical decision data provided csv (comma-separated variable) file. Functions exist R read many types data files; rio package's import() function can read types files. However, csv files avoids problems like Excel's insistence mangling anything even vaguely resembles date. may wish export data csv file contains data want visualise, rather full, larger workbook. possible clean almost file reproducibly R, however, noted , can require higher level coding skills. getting started visualisation, suggest removing summary rows additional notes files import file contains rows columns data want plot.","code":""},{"path":"introduction.html","id":"variable-names","chapter":"1 Introduction","heading":"1.6.2 Variable names","text":"Ensuring variable names consistent can make much easier work R. recommend using short informative variable names, example rt_word preferred dv1_iv1 reaction_time_word_condition either hard read hard type.also helpful consistent naming scheme, particularly variable names require one word. Two popular options CamelCase new word begins capital letter, snake_case letters lower case words separated underscore. purposes naming variables, avoid using spaces variable names (e.g., rt word) consider additional meaning separator beyond making variable names easier read. example, rt_word, rt_nonword, acc_word, acc_nonword DV left separator level IV right. rt_word_condition hand two separators one meaningful, making difficult split variable names consistently. paper, use snake_case lower case letters variable names remember put capital letters.working data, can rename columns Excel, resources listed online appendices point rename columns reproducibly code.","code":""},{"path":"introduction.html","id":"data-values","chapter":"1 Introduction","heading":"1.6.3 Data values","text":"benefit R categorical data can entered text. tutorial dataset, language group entered 1 2, can show recode numeric values factors labels. However, recommend recording meaningful labels rather numbers beginning data collection avoid misinterpreting data due coding errors. Note values must match exactly order considered category R case sensitive, \"mono\", \"Mono\", \"monolingual\" classified members three separate categories.Finally, importing data straightforward cells represent missing data left empty rather containing values like NA, missing 9993. complementary rule thumb column contain one type data, words numbers, .","code":""},{"path":"getting-started.html","id":"getting-started","chapter":"2 Getting Started","heading":"2 Getting Started","text":"","code":""},{"path":"getting-started.html","id":"loading-packages","chapter":"2 Getting Started","heading":"2.1 Loading packages","text":"load packages functions need, use library() function. Whilst need install packages , need load packages want use library() every time start R start new session. load tidyverse, actually load several separate packages part collection designed work together. R produce message tells names packages loaded.","code":"\nlibrary(tidyverse)\nlibrary(patchwork)"},{"path":"getting-started.html","id":"loading-data","chapter":"2 Getting Started","heading":"2.2 Loading data","text":"load simulated data use function read_csv() readr tidyverse package. Note many ways reading data R, benefit function enters data R environment way makes sense tidyverse packages.code created object dat read data file ldt_data.csv. object appear environment pane top right. Note name data file must quotation marks file extension (.csv) must also included. receive error …exist current working directory highly likely made typo file name (remember R case sensitive), forgotten include file extension .csv, data file want load stored project folder. get error find function means either loaded correct package (common beginner error write code, run ), made typo function name.always check importing data resulting table looks like expect. view dataset, click dat environment pane run View(dat) console. environment pane also tells us object dat 100 observations 7 variables, useful quick check ensure one loaded right data. Note 7 variables additional piece information chr num; specifies kind data column. Similar Excel SPSS, R uses information (variable type) specify allowable manipulations data. instance character data id averaged, possible numerical data age.","code":"\ndat <- read_csv(file = \"ldt_data.csv\")"},{"path":"getting-started.html","id":"handling-numeric-factors","chapter":"2 Getting Started","heading":"2.3 Handling numeric factors","text":"Another useful check use functions summary() str() (structure) check kind data R thinks column. Run code look output , comparing know simulated dataset:factor language coded 1 2, R categorised column containing numeric information unless correct , cause problems visualisation analysis. code shows recode numeric codes labels.mutate() makes new columns data table, overwrites column;factor() translates language column factor labels \"monolingual\" \"bilingual\". can also use factor() set display order column contains words. Otherwise, display alphabetical order. case replacing numeric data (1 2) language column equivalent English labels monolingual 1 bilingual 2. time change column type factor, R defines categorical data.Make sure always check output code run. running code language full NA values, means run code twice. first time worked transformed values 1 monolingual 2 bilingual. run code dataset, look values 1 2, longer match, return NA. happens, need reload dataset csv file.good way avoid never overwrite data, always store output code new objects (e.g., dat_recoded) new variables (language_recoded). purposes tutorial, overwriting provides useful teachable moment leave .","code":"\nsummary(dat)\nstr(dat)\ndat <- mutate(dat, language = factor(\n  x = language, # column to translate\n  levels = c(1, 2), # values of the original data in preferred order\n  labels = c(\"monolingual\", \"bilingual\") # labels for display\n))"},{"path":"getting-started.html","id":"argument-names","chapter":"2 Getting Started","heading":"2.4 Argument names","text":"function list arguments can take, default order arguments. can get information function entering ?function_name console, although aware learning read help documentation R skill . writing R code, long stick default order, explicitly call argument names, example, code also written :One challenges learning R many \"helpful\" examples solutions find online include argument names novice learners completely opaque. tutorial, include argument names first time function used, however, remove argument names subsequent examples facilitate knowledge transfer help available online.","code":"\ndat <- mutate(dat, language = factor(\n  language,\n  c(1, 2),\n  c(\"monolingual\", \"bilingual\")\n))"},{"path":"getting-started.html","id":"summarising-data","chapter":"2 Getting Started","heading":"2.5 Summarising data","text":"can calculate plot basic descriptive information demographics sample using imported dataset without additional wrangling (.e., data processing). code uses %>% operator, otherwise known pipe, can translated \"\". example, code can read :Start dataset dat ;Start dataset dat ;Group variable language ;Group variable language ;Count number observations group ;Count number observations group ;Remove groupingRemove groupinggroup_by() result surface level changes dataset, rather, changes underlying structure groups specified, whatever functions called next performed separately level grouping variable. grouping remains object created important remove ungroup() avoid future operations object unknowingly performed groups.code therefore counts number observations group variable language. just need total number observations, remove group_by() ungroup() lines, perform operation whole dataset, rather groups:Similarly, may wish calculate mean age (SD) sample can using function summarise() dplyr tidyverse package.code produces summary data form column named mean_age contains result calculating mean variable age. creates sd_age standard deviation. Finally, uses function n() add number values used calculate statistic column named n_values - useful sanity check whenever make summary statistics.Note code save result operation, simply output result console. wish save future use, can store object using <- notation print later typing object name.Finally, group_by() function work way calculating summary statistics -- output function called group_by() produced level grouping variable.","code":"\ndat %>%\n  group_by(language) %>%\n  count() %>%\n  ungroup()\ndat %>%\n  count()\ndat %>%\n  summarise(mean_age = mean(age),\n            sd_age = sd(age),\n            n_values = n())\nage_stats <- dat %>%\n  summarise(mean_age = mean(age),\n            sd_age = sd(age),\n            n_values = n())\ndat %>%\n  group_by(language) %>%\n  summarise(mean_age = mean(age),\n            sd_age = sd(age),\n            n_values = n()) %>%\n  ungroup()"},{"path":"getting-started.html","id":"bar-chart-of-counts","chapter":"2 Getting Started","heading":"2.6 Bar chart of counts","text":"first plot, make simple bar chart counts shows number participants language group.\nFigure 2.1: Bar chart counts.\nfirst line code sets base plot.data specifies data source use plotdata specifies data source use plotmapping specifies variables map aesthetics (aes) plot. Mappings describe variables data mapped visual properties (aesthetics) geoms.mapping specifies variables map aesthetics (aes) plot. Mappings describe variables data mapped visual properties (aesthetics) geoms.x specifies variable put x-axisx specifies variable put x-axisThe second line code adds geom, connected base code +. case, ask geom_bar(). geom associated default statistic. geom_bar(), default statistic count data passed . means specify y variable making bar plot counts; given x variable geom_bar() automatically calculate counts groups variable. example, counts number data points category language variable.base geoms layers work symbiosis worthwhile checking mapping rules related default statistic plot's geom.","code":"\nggplot(data = dat, mapping = aes(x = language)) +\n  geom_bar()\nggplot(data = dat, mapping = aes(x = language)) + \n  geom_bar(aes(y = (..count..)/sum(..count..))) + \n  scale_y_continuous(name = \"Percent\", labels=scales::percent) "},{"path":"getting-started.html","id":"aggregates-and-percentages","chapter":"2 Getting Started","heading":"2.7 Aggregates and percentages","text":"dataset already counts want plot, can set stat=\"identity\" inside geom_bar() use number instead counting rows. example, plot percentages rather counts within ggplot2, can calculate store new object used dataset. can software comfortable , save new data, import new table, can use code manipulate data.Notice now omitting names arguments data mapping ggplot() function.\nFigure 2.2: Bar chart pre-calculated counts.\n","code":"\ndat_percent <- dat %>%    # start with the data in dat\n  count(language) %>%     # count rows per language (makes a new column called n)\n  mutate(percent = (n/sum(n)*100)) # make a new column 'percent' equal to \n                                   # n divided by the sum of n times 100\nggplot(dat_percent, aes(x = language, y = percent)) +\n  geom_bar(stat=\"identity\") "},{"path":"getting-started.html","id":"histogram","chapter":"2 Getting Started","heading":"2.8 Histogram","text":"code plot histogram age similar bar chart code. start setting plot space, dataset use, mapping variables relevant axis. case, want plot histogram age x-axis:\nFigure 2.3: Histogram ages.\nbase statistic geom_histogram() also count, default geom_histogram() divides x-axis 30 \"bins\" counts many observations bin y-axis need specified. run code produce histogram, get message \"stat_bin() using bins = 30. Pick better value binwidth\". can change either setting number bins (e.g., bins = 20) width bin (e.g., binwidth = 5) argument.\nFigure 2.4: Histogram ages bin covers five years.\n","code":"\nggplot(dat, aes(x = age)) +\n  geom_histogram()\nggplot(dat, aes(x = age)) +\n  geom_histogram(binwidth = 5)"},{"path":"getting-started.html","id":"customisation-1","chapter":"2 Getting Started","heading":"2.9 Customisation 1","text":"far made basic plots default visual appearance. move experimental data, introduce simple visual customisation options. many ways can control customise visual appearance figures R. However, understand logic one, becomes easier understand others may see examples. visual appearance elements can customised within geom , within aesthetic mapping, connecting additional layers +. section look simplest commonly-used customisations: changing colours, adding axis labels, adding themes.","code":""},{"path":"getting-started.html","id":"changing-colours","chapter":"2 Getting Started","heading":"2.9.1 Changing colours","text":"basic bar chart, can control colours used display bars setting fill (internal colour) colour (outline colour) inside geom function. method changes bars; show later set fill colour separately different groups.\nFigure 2.5: Histogram custom colors bar fill line colors.\n","code":"\nggplot(dat, aes(age)) +\n  geom_histogram(binwidth = 1, \n                 fill = \"white\", \n                 colour = \"black\")"},{"path":"getting-started.html","id":"editing-axis-names-and-labels","chapter":"2 Getting Started","heading":"2.9.2 Editing axis names and labels","text":"edit axis names labels can connect scale_* functions plot + add layers. functions part ggplot2 one use depends aesthetic wish edit (e.g., x-axis, y-axis, fill, colour) well type data represents (discrete, continuous).bar chart counts, x-axis mapped discrete (categorical) variable whilst y-axis continuous. relevant scale function various elements can customised. axis function added layer basic plot.\nFigure 2.6: Bar chart custom axis labels.\nname controls overall name axis (note use quotation marks)name controls overall name axis (note use quotation marks)labels controls names conditions discrete variable.labels controls names conditions discrete variable.c() function see many different contexts used combine multiple values. case, labels want apply combined within c() enclosing word within parenthesis, order displayed plot. common error forget enclose multiple values c().c() function see many different contexts used combine multiple values. case, labels want apply combined within c() enclosing word within parenthesis, order displayed plot. common error forget enclose multiple values c().breaks controls tick marks axis. , multiple values, enclosed within c(). numeric text, need quotation marks.breaks controls tick marks axis. , multiple values, enclosed within c(). numeric text, need quotation marks.common error map wrong type scale_ function variable. Try running code:produce error Discrete value supplied continuous scale used continuous scale function, despite fact x-axis variable discrete. get error (reverse), check type data axis function used.","code":"\nggplot(dat, aes(language)) +\n  geom_bar() +\n  scale_x_discrete(name = \"Language group\", \n                   labels = c(\"Monolingual\", \"Bilingual\")) +\n  scale_y_continuous(name = \"Number of participants\",\n                     breaks = c(0,10,20,30,40,50))\n# produces an error\nggplot(dat, aes(language)) +\n  geom_bar() +\n  scale_x_continuous(name = \"Language group\", \n                     labels = c(\"Monolingual\", \"Bilingual\")) "},{"path":"getting-started.html","id":"adding-a-theme","chapter":"2 Getting Started","heading":"2.9.3 Adding a theme","text":"ggplot2 number built-visual themes can apply extra layer. code updates x-axis y-axis labels histogram, also applies theme_minimal(). part theme can independently customised, may necessary, example, journal guidelines fonts publication. instructions online appendices.\nFigure 2.7: Histogram custom theme.\ncan set theme globally subsequent plots use theme. theme_set() part ggplot() object, run code . may useful add code top script plots produced subsequently use theme.wished return default theme, change specify theme_grey().","code":"\nggplot(dat, aes(age)) +\n  geom_histogram(binwidth = 1, fill = \"wheat\", color = \"black\") +\n  scale_x_continuous(name = \"Participant age (years)\") +\n  theme_minimal()\ntheme_set(theme_minimal())"},{"path":"getting-started.html","id":"activities-1","chapter":"2 Getting Started","heading":"2.10 Activities 1","text":"move try following:Add layer edits name y-axis histogram label Number participants.Change colour bars bar chart red.Remove theme_minimal() histogram instead apply one available themes. find available themes, start typing theme_ auto-complete show available options - work loaded tidyverse library library(tidyverse).","code":"\nggplot(dat, aes(age)) +\n  geom_histogram(binwidth = 1, fill = \"wheat\", color = \"black\") +\n  scale_x_continuous(name = \"Participant age (years)\") +\n  theme_minimal() +\n  scale_y_continuous(name = \"Number of participants\")\nggplot(data = dat, mapping = aes(x = language)) +\n  geom_bar(fill = \"red\")\n#multiple options here e.g., theme_classic()\nggplot(dat, aes(age)) +\n  geom_histogram(binwidth = 1, fill = \"wheat\", color = \"black\") +\n  scale_x_continuous(name = \"Participant age (years)\") +\n  theme_classic()\n\n# theme_bw()\nggplot(dat, aes(age)) +\n  geom_histogram(binwidth = 1, fill = \"wheat\", color = \"black\") +\n  scale_x_continuous(name = \"Participant age (years)\") +\n  theme_bw()"},{"path":"transforming-data.html","id":"transforming-data","chapter":"3 Transforming Data","heading":"3 Transforming Data","text":"","code":""},{"path":"transforming-data.html","id":"data-formats","chapter":"3 Transforming Data","heading":"3.1 Data formats","text":"visualise experimental reaction time accuracy data using ggplot2, first need reshape data wide format long format. step can cause friction novice users R. Traditionally, psychologists taught data skills using wide-format data. Wide-format data typically one row data participant, separate columns score variable. repeated-measures variables, dependent variable split across different columns. -groups variables, separate column added encode group participant observation belongs.simulated lexical decision data currently wide format (see Table 3.1), participant's aggregated4 reaction time accuracy level within-subject variable split across multiple columns repeated factor conditon (words versus non-words).Table 3.1: Data wide format.Wide format popular intuitive read easy enter data data one participant contained within single row. However, purposes analysis, particularly analysis using R, format unsuitable. Whilst intuitive read human, true computer. Wide-format data concatenates multiple pieces information single column, example Table 3.1, rt_word contains information related DV one level IV. comparison, long-format data separates DV IVs column represents one variable. less intuitive part long-format data multiple rows participant (one row observation) column encodes level IV (word nonword). Wickham (2014) provides comprehensive overview benefits similar format known tidy data, standard way mapping dataset structure. purposes tutorial two important rules: column variable row observation.Moving using wide-format long-format datasets can require conceptual shift part researcher one usually comes practice repeated exposure5. may helpful make note “row = participant” (wide format) “row = observation” (long format) get used moving formats. example dataset, adhering rules reshaping data produce Table 3.2. Rather different observations dependent variable split across columns, now single column DV reaction time, single column DV accuracy. participant now multiple rows data, one observation (.e., participant many rows levels within-subject IV). Although repetition age language group, row unique looking combination measures.Table 3.2: Data correct format visualization.benefits flexibility format hopefully become apparent progress tutorial, however, useful rule thumb working data R visualisation anything shares axis probably column. example, simple boxplot showing reaction time condition display variable condition x-axis bars representing word nonword data, rt y-axis. Therefore, data relating condition one column, data relating rt separate single column, rather split like wide-format data.","code":""},{"path":"transforming-data.html","id":"wide-to-long-format","chapter":"3 Transforming Data","heading":"3.2 Wide to long format","text":"chosen 2 x 2 design two DVs, anticipate design many researchers familiar may also existing datasets similar structure. However, worth normalising trial--error part process learning apply functions new datasets structures. Data visualisation can useful way scaffold learning data transformations can provide concrete visual check whether done intended data.","code":""},{"path":"transforming-data.html","id":"step-1-pivot_longer","chapter":"3 Transforming Data","heading":"3.2.1 Step 1: pivot_longer()","text":"first step use function pivot_longer() transform data long-form. purposefully used complex dataset two DVs tutorial aid researchers applying code datasets. , break steps involved help show code works.first code ignores dataset two DVs, problem fix step 2. pivot functions can easier show tell - may find useful exercise run code compare newly created object long (Table 3.3) original dat Table 3.1 reading .tidyverse functions, first argument specifies dataset use base, case dat. argument name often dropped examples.tidyverse functions, first argument specifies dataset use base, case dat. argument name often dropped examples.cols specifies columns want transform. easiest way visualise think columns new long-form dataset change. refer back Table 3.1, can see id, age, language remain, columns contain measurements DVs change. colon notation first_column:last_column used select variables first column specified last code, cols specifies columns want transform rt_word acc_nonword.cols specifies columns want transform. easiest way visualise think columns new long-form dataset change. refer back Table 3.1, can see id, age, language remain, columns contain measurements DVs change. colon notation first_column:last_column used select variables first column specified last code, cols specifies columns want transform rt_word acc_nonword.names_to specifies name new column created. column contain names selected existing columns.names_to specifies name new column created. column contain names selected existing columns.Finally, values_to names new column contain values selected columns. case call dv.Finally, values_to names new column contain values selected columns. case call dv.point may find helpful go back compare dat long see argument matches output table.Table 3.3: Data long format mixed DVs.","code":"\nlong <- pivot_longer(data = dat, \n                     cols = rt_word:acc_nonword, \n                     names_to = \"dv_condition\",\n                     values_to = \"dv\")"},{"path":"transforming-data.html","id":"step-2-pivot_longer-adjusted","chapter":"3 Transforming Data","heading":"3.2.2 Step 2: pivot_longer() adjusted","text":"problem long-format data-set dv_condition combines two variables - information type DV condition IV. account , include new argument names_sep adjust name_to specify creation two new columns. Note pivoting wide-format dataset dat step 1.names_sep specifies split variable name cases multiple components. taking care name variables consistently meaningfully pays . word left separator (_) always DV type word right always condition within-subject IV, easy automatically split columns.names_sep specifies split variable name cases multiple components. taking care name variables consistently meaningfully pays . word left separator (_) always DV type word right always condition within-subject IV, easy automatically split columns.Note specifying one column name, must combined using c() enclosed quotation marks.Note specifying one column name, must combined using c() enclosed quotation marks.Table 3.4: Data long format dv type condition separate columns.","code":"\nlong2 <- pivot_longer(data = dat, \n                     cols = rt_word:acc_nonword, \n                     names_sep = \"_\", \n                     names_to = c(\"dv_type\", \"condition\"),\n                     values_to = \"dv\")"},{"path":"transforming-data.html","id":"step-3-pivot_wider","chapter":"3 Transforming Data","heading":"3.2.3 Step 3: pivot_wider()","text":"Although now split columns separate variables DV type level condition, two DVs different types data, additional bit wrangling required get data right format plotting.current long-format dataset, column dv contains reaction time accuracy measures. Keeping mind rule thumb anything shares axis probably column, creates problem plot two different units measurement axis. fix need use function pivot_wider(). , encourage point compare long2 dat_long code try map connections reading .first argument dataset wish work , case long2. removed argument name data example.first argument dataset wish work , case long2. removed argument name data example.names_from reverse names_to pivot_longer(). take values variable specified use new column names. case, values rt acc currently dv_type column become new column names.names_from reverse names_to pivot_longer(). take values variable specified use new column names. case, values rt acc currently dv_type column become new column names.values_from reverse values_to pivot_longer(). specifies column contains values fill new columns . case, new columns rt acc filled values dv.values_from reverse values_to pivot_longer(). specifies column contains values fill new columns . case, new columns rt acc filled values dv., can helpful compare dataset code see aligns. final long-form data look like Table 3.2.working dataset one DV, note step 1 process necessary. Also, careful calculate demographic descriptive statistics long-form dataset. process transformation introduced repetition variables, wide-format dataset one row equals one participant used demographic information. Finally, three step process noted broken teaching purposes, reality, one likely single pipeline code, example:","code":"\ndat_long <- pivot_wider(long2, \n                        names_from = \"dv_type\", \n                        values_from = \"dv\")\ndat_long <- pivot_longer(data = dat, \n                         cols = rt_word:acc_nonword, \n                         names_sep = \"_\", \n                         names_to = c(\"dv_type\", \"condition\"),\n                         values_to = \"dv\") %>%\n  pivot_wider(names_from = \"dv_type\", \n              values_from = \"dv\")"},{"path":"transforming-data.html","id":"histogram-2","chapter":"3 Transforming Data","heading":"3.3 Histogram 2","text":"Now experimental data right form, can begin create useful visualizations. First, demonstrate code recipes can reused adapted, create histograms reaction time accuracy. code uses template changes dataset (dat_long), bin-widths histograms, x variable display (rt/acc), name x-axis.\nFigure 3.1: Histograms showing distribution reaction time (top) accuracy (bottom)\n","code":"\nggplot(dat_long, aes(x = rt)) +\n  geom_histogram(binwidth = 10, fill = \"white\", colour = \"black\") +\n  scale_x_continuous(name = \"Reaction time (ms)\")\n\nggplot(dat_long, aes(x = acc)) +\n  geom_histogram(binwidth = 1, fill = \"white\", colour = \"black\") +\n  scale_x_continuous(name = \"Accuracy (0-100)\")"},{"path":"transforming-data.html","id":"density-plots","chapter":"3 Transforming Data","heading":"3.4 Density plots","text":"layer system makes easy create new types plots adapting existing recipes. example, rather creating histogram, can create smoothed density plot calling geom_density() rather geom_histogram(). rest code remains identical.\nFigure 3.2: Density plot reaction time.\n","code":"\nggplot(dat_long, aes(x = rt)) +\n  geom_density()+\n  scale_x_continuous(name = \"Reaction time (ms)\")"},{"path":"transforming-data.html","id":"grouped-density-plots","chapter":"3 Transforming Data","heading":"3.4.1 Grouped density plots","text":"Density plots useful comparing distributions different groups data. dataset now long format, variable contained within single column, can map condition plot.addition mapping rt x-axis, specify fill aesthetic fill visualisation level condition variable represented different colour.density plots overlapping, set alpha = 0.75 make geoms 75% transparent.x y-axis scale functions, can edit names labels fill aesthetic adding another scale_* layer (scale_fill_discrete()).Note fill set inside aes() function, tells ggplot set fill differently value condition column. specify colour (e.g., fill=\"red\"), like set fill inside geom_*() function .\nFigure 3.3: Density plot reaction times grouped condition.\n","code":"\nggplot(dat_long, aes(x = rt, fill = condition)) +\n  geom_density(alpha = 0.75)+\n  scale_x_continuous(name = \"Reaction time (ms)\") +\n  scale_fill_discrete(name = \"Condition\",\n                      labels = c(\"Word\", \"Non-word\"))"},{"path":"transforming-data.html","id":"scatterplots","chapter":"3 Transforming Data","heading":"3.5 Scatterplots","text":"Scatterplots created calling geom_point() require x y variable specified mapping.\nFigure 3.4: Scatterplot reaction time versus age.\nline best fit can added additional layer calls function geom_smooth(). default draw LOESS curved regression line. However, linear line best fit can specified using method = \"lm\". default, geom_smooth() also draw confidence envelope around regression line; can removed adding se = FALSE geom_smooth(). common error try use geom_line() draw line best fit, whilst sensible guess, work (try ).\nFigure 3.5: Line best fit reaction time versus age.\n","code":"\nggplot(dat_long, aes(x = rt, y = age)) +\n  geom_point()\nggplot(dat_long, aes(x = rt, y = age)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")"},{"path":"transforming-data.html","id":"grouped-scatterplots","chapter":"3 Transforming Data","heading":"3.5.1 Grouped scatterplots","text":"Similar density plot, scatterplot can also easily adjusted display grouped data. geom_point(), grouping variable mapped colour rather fill relevant scale_* function added.\nFigure 3.6: Grouped scatterplot reaction time versus age condition.\n","code":"\nggplot(dat_long, aes(x = rt, y = age, colour = condition)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  scale_colour_discrete(name = \"Condition\",\n                      labels = c(\"Word\", \"Non-word\"))"},{"path":"transforming-data.html","id":"long-to-wide-format","chapter":"3 Transforming Data","heading":"3.6 Long to wide format","text":"Following rule anything shares axis probably column means frequently need data long-form using ggplot2, However, cases wide format necessary. example, may wish visualise relationship reaction time word non-word conditions. requires corresponding word non-word values participant row. easiest way achieve case simply use original wide-format data input:\nFigure 3.7: Scatterplot data grouped language group\nHowever, may also cases original wide-format version can use pivot_wider() function transform long wide.","code":"\nggplot(dat, aes(x = rt_word, y = rt_nonword, colour = language)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\ndat_wide <- dat_long %>%\n  pivot_wider(id_cols = \"id\",\n              names_from = \"condition\", \n              values_from = c(rt,acc))"},{"path":"transforming-data.html","id":"customisation-2","chapter":"3 Transforming Data","heading":"3.7 Customisation 2","text":"","code":""},{"path":"transforming-data.html","id":"accessible-colour-schemes","chapter":"3 Transforming Data","heading":"3.7.1 Accessible colour schemes","text":"One drawbacks using ggplot2 visualisation default colour scheme accessible (visually appealing). red green default palette difficult colour-blind people differentiate, also display well greyscale. can specify exact custom colours plots, one easy option use custom colour palette. take arguments default scale sister functions updating axis names labels, display plots contrasting colours can read colour-blind people also print well grey scale. categorical colours, \"Set2\", \"Dark2\" \"Paired\" palettes brewer scale functions colourblind-safe (hard distinhuish greyscale). continuous colours, colour representing magnitude correlation tile plot, viridis scale functions provide number different colourblind greyscale-safe options.\nFigure 3.8: Use Dark2 brewer colour scheme accessibility.\n","code":"\nggplot(dat_long, aes(x = rt, y = age, colour = condition)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  scale_color_brewer(palette = \"Dark2\",\n                     name = \"Condition\",\n                     labels = c(\"Word\", \"Non-word\"))"},{"path":"transforming-data.html","id":"specifying-axis-breaks-with-seq","chapter":"3 Transforming Data","heading":"3.7.2 Specifying axis breaks with seq()","text":"Previously, edited breaks axis labels, done manually, typing values want display axis. example, code edits y-axis age displayed increments 5.However, somewhat inefficient. Instead, can use function seq() (short sequence) specify first last value increments breaks display two values.","code":"\nggplot(dat_long, aes(x = rt, y = age)) +\n  geom_point() +\n  scale_y_continuous(breaks = c(20,25,30,35,40,45,50,55,60))\nggplot(dat_long, aes(x = rt, y = age)) +\n  geom_point() +\n  scale_y_continuous(breaks = seq(20,60, by = 5))"},{"path":"transforming-data.html","id":"activities-2","chapter":"3 Transforming Data","heading":"3.8 Activities 2","text":"move try following:Use fill created grouped histograms display distributions rt language group separately also edit fill axis labels. Try adding position = \"dodge\" geom_histogram() see happens.Use scale_* functions edit name x y-axis scatterplotUse se = FALSE remove confidence envelope scatterplotsRemove method = \"lm\" geom_smooth() produce curved fit line.Replace default fill grouped density plot colour-blind friendly version.","code":"\n# fill and axis changes\nggplot(dat_long, aes(x = rt, fill = language)) +\n  geom_histogram(binwidth = 10) +\n  scale_x_continuous(name = \"Reaction time (ms)\") +\n  scale_fill_discrete(name = \"Group\",\n                      labels = c(\"Monolingual\", \"Bilingual\"))\n# add in dodge\nggplot(dat_long, aes(x = rt, fill = language)) +\n  geom_histogram(binwidth = 10, position = \"dodge\") +\n  scale_x_continuous(name = \"Reaction time (ms)\") +\n  scale_fill_discrete(name = \"Group\",\n                      labels = c(\"Monolingual\", \"Bilingual\"))\nggplot(dat_long, aes(x = rt, y = age)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  scale_x_continuous(name = \"Reaction time\") +\n  scale_y_continuous(name = \"Age\")\nggplot(dat_long, aes(x = rt, y = age)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  scale_x_continuous(name = \"Reaction time\") +\n  scale_y_continuous(name = \"Age\")\nggplot(dat_long, aes(x = rt, y = age)) +\n  geom_point() +\n  geom_smooth() +\n  scale_x_continuous(name = \"Reaction time\") +\n  scale_y_continuous(name = \"Age\")\nggplot(dat_long, aes(x = rt, fill = condition)) +\n  geom_density(alpha = 0.75)+\n  scale_x_continuous(name = \"Reaction time (ms)\") +\n  scale_fill_brewer(palette = \"Set2\", # or \"Dark2\" or \"Paired\"\n                    name = \"Condition\",\n                    labels = c(\"Word\", \"Non-word\"))"},{"path":"representing-summary-statistics.html","id":"representing-summary-statistics","chapter":"4 Representing Summary Statistics","heading":"4 Representing Summary Statistics","text":"layering approach used ggplot2 make figures comes want include information distribution spread scores. section introduce different ways including summary statistics figures.","code":""},{"path":"representing-summary-statistics.html","id":"boxplots","chapter":"4 Representing Summary Statistics","heading":"4.1 Boxplots","text":"geom_point(), boxplots also require x- y-variable specified. case, x must discrete, categorical variable6, whilst y must continuous.\nFigure 4.1: Basic boxplot.\n","code":"\nggplot(dat_long, aes(x = condition, y = acc)) +\n  geom_boxplot()"},{"path":"representing-summary-statistics.html","id":"grouped-boxplots","chapter":"4 Representing Summary Statistics","heading":"4.1.1 Grouped boxplots","text":"histograms density plots, fill can used create grouped boxplots. looks like lot complicated code first glance, just editing axis labels.\nFigure 4.2: Grouped boxplots\n","code":"\nggplot(dat_long, aes(x = condition, y = acc, fill = language)) +\n  geom_boxplot() +\n  scale_fill_brewer(palette = \"Dark2\",\n                    name = \"Group\",\n                    labels = c(\"Bilingual\", \"Monolingual\")) +\n  theme_classic() +\n  scale_x_discrete(name = \"Condition\",\n                   labels = c(\"Word\", \"Non-word\")) +\n  scale_y_continuous(name = \"Accuracy\")"},{"path":"representing-summary-statistics.html","id":"violin-plots","chapter":"4 Representing Summary Statistics","heading":"4.2 Violin plots","text":"Violin plots display distribution dataset can created calling geom_violin(). -called shape make sometimes looks something like violin. essentially sideways, mirrored density plots. Note code identical code used draw boxplots , except call geom_violin() rather geom_boxplot().\nFigure 4.3: Violin plot.\n","code":"\nggplot(dat_long, aes(x = condition, y = acc, fill = language)) +\n  geom_violin() +\n  scale_fill_brewer(palette = \"Dark2\",\n                    name = \"Group\",\n                    labels = c(\"Bilingual\", \"Monolingual\")) +\n  theme_classic() +\n  scale_x_discrete(name = \"Condition\",\n                   labels = c(\"Word\", \"Non-word\")) +\n  scale_y_continuous(name = \"Accuracy\")"},{"path":"representing-summary-statistics.html","id":"bar-chart-of-means","chapter":"4 Representing Summary Statistics","heading":"4.3 Bar chart of means","text":"Commonly, rather visualising distributions raw data, researchers wish visualise means using bar chart error bars. SPSS Excel, ggplot2 requires calculate summary statistics plot summary. least two ways , first make table summary statistics earlier calculating participant demographics plot table. second approach calculate statistics within layer plot. approach use .First present code making bar chart. code bar charts common visualisation familiar researchers. However, urge use visualisation provides transparency distribution raw data, violin-boxplots present next section.summarise data means, use new function stat_summary(). Rather calling geom_* function, call stat_summary() specify want summarise data want present summary figure.fun specifies summary function gives us y-value want plot, case, mean.fun specifies summary function gives us y-value want plot, case, mean.geom specifies shape plot want use display summary. first layer specify bar. geom-type functions shown , part stat_summary() function tied aesthetic mapping first line code. underlying statistics bar chart means must specify IV (x-axis) well DV (y-axis).geom specifies shape plot want use display summary. first layer specify bar. geom-type functions shown , part stat_summary() function tied aesthetic mapping first line code. underlying statistics bar chart means must specify IV (x-axis) well DV (y-axis).\nFigure 4.4: Bar plot means.\nadd error bars, another layer added second call stat_summary. time, function represents type error bars wish draw, can choose mean_se standard error, mean_cl_normal confidence intervals, mean_sdl standard deviation. width controls width error bars - try changing value see happens.Whilst fun returns single value (y) per condition, fun.data returns y-values want plot plus minimum maximum values, case, mean_se\nFigure 4.5: Bar plot means error bars representing SE.\n","code":"\nggplot(dat_long, aes(x = condition, y = rt)) +\n  stat_summary(fun = \"mean\", geom = \"bar\")\nggplot(dat_long, aes(x = condition, y = rt)) +\n  stat_summary(fun = \"mean\", geom = \"bar\") +\n  stat_summary(fun.data = \"mean_se\", \n               geom = \"errorbar\", \n               width = .2)"},{"path":"representing-summary-statistics.html","id":"violin-boxplot","chapter":"4 Representing Summary Statistics","heading":"4.4 Violin-boxplot","text":"power layered system making figures highlighted ability combine different types plots. example, rather using bar chart error bars, one can easily create single plot includes density distribution, confidence intervals, means standard errors. code first draw violin plot, layer boxplot, point mean (note geom = \"point\" instead \"bar\") standard error bars (geom = \"errorbar\"). plot require much additional code produce bar plot error bars, yet amount information displayed vastly superior.fatten = NULL boxplot geom removes median line, can make easier see mean error bars. Including argument result message Removed 1 rows containing missing values (geom_segment) cause concern. Removing argument reinstate median line.\nFigure 4.6: Violin-boxplot mean dot standard error bars.\nimportant note order layers matters worth experimenting order see order matters. example, call geom_boxplot() followed geom_violin(), get following mess:\nFigure 4.7: Plot geoms wrong order.\n","code":"\nggplot(dat_long, aes(x = condition, y= rt)) +\n  geom_violin() +\n  # remove the median line with fatten = NULL\n  geom_boxplot(width = .2, \n               fatten = NULL) +\n  stat_summary(fun = \"mean\", geom = \"point\") +\n  stat_summary(fun.data = \"mean_se\", \n               geom = \"errorbar\", \n               width = .1)\nggplot(dat_long, aes(x = condition, y= rt)) +\n  geom_boxplot() +  \n  geom_violin() +\n  stat_summary(fun = \"mean\",  geom = \"point\") +\n  stat_summary(fun.data = \"mean_se\", \n               geom = \"errorbar\", \n               width = .1)"},{"path":"representing-summary-statistics.html","id":"grouped-violin-boxplots","chapter":"4 Representing Summary Statistics","heading":"4.4.1 Grouped violin-boxplots","text":"previous plots, another variable can mapped fill violin-boxplot. (Remember add colourblind-safe palette.) However, simply adding fill mapping causes different components plot become misaligned different default positions:\nFigure 4.8: Grouped violin-boxplots without repositioning.\nrectify need adjust argument position misaligned layers. position_dodge() instructs R move (dodge) position plot component specified value; finding value looks best can sometimes take trial error.\nFigure 4.9: Grouped violin-boxplots repositioning.\n","code":"\nggplot(dat_long, aes(x = condition, y= rt, fill = language)) +\n  geom_violin() +\n  geom_boxplot(width = .2, \n               fatten = NULL) +\n  stat_summary(fun = \"mean\",  geom = \"point\") +\n  stat_summary(fun.data = \"mean_se\", \n               geom = \"errorbar\", \n               width = .1) +\n  scale_fill_brewer(palette = \"Dark2\")\n# set the offset position of the geoms\npos <- position_dodge(0.9)\n\nggplot(dat_long, aes(x = condition, y= rt, fill = language)) +\n  geom_violin(position = pos) +\n  geom_boxplot(width = .2, \n               fatten = NULL, \n               position = pos) +\n  stat_summary(fun = \"mean\", \n               geom = \"point\", \n               position = pos) +\n  stat_summary(fun.data = \"mean_se\", \n               geom = \"errorbar\", \n               width = .1,\n               position = pos) +\n  scale_fill_brewer(palette = \"Dark2\")"},{"path":"representing-summary-statistics.html","id":"customisation-part-3","chapter":"4 Representing Summary Statistics","heading":"4.5 Customisation part 3","text":"Combining multiple type plots can present issue colours, particularly fill line colours similar. example, hard make boxplot violin plot .number solutions problem. One solution adjust transparency layer using alpha. exact values needed can take trial error:\nFigure 4.10: Using transparency fill color.\nAlternatively, can change fill individual geoms adding fill = \"colour\" relevant geom. example , fill boxplots white. Since boxplots longer filled according language, still want four separate boxplots, add extra mapping geom_boxplot() specify want output grouped interaction condition language.\nFigure 4.11: Manually changing fill color.\n","code":"\nggplot(dat_long, aes(x = condition, y= rt, fill = language, \n                     group = paste(condition, language))) +\n  geom_violin(alpha = 0.25, position = pos) +\n  geom_boxplot(width = .2, \n               fatten = NULL, \n               alpha = 0.75,\n               position = pos) +\n  stat_summary(fun = \"mean\", \n               geom = \"point\", \n               position = pos) +\n  stat_summary(fun.data = \"mean_se\", \n               geom = \"errorbar\", \n               width = .1,\n               position = pos) +\n  scale_fill_brewer(palette = \"Dark2\")\nggplot(dat_long, aes(x = condition, y= rt, fill = language)) +\n  geom_violin(position = pos) +\n  geom_boxplot(width = .2, fatten = NULL, \n               mapping = aes(group = interaction(condition, language)),\n               fill = \"white\",\n               position = pos) +\n  stat_summary(fun = \"mean\", \n               geom = \"point\", \n               position = pos) +\n  stat_summary(fun.data = \"mean_se\", \n               geom = \"errorbar\", \n               width = .1,\n               position = pos) +\n  scale_fill_brewer(palette = \"Dark2\")"},{"path":"representing-summary-statistics.html","id":"activities-3","chapter":"4 Representing Summary Statistics","heading":"4.6 Activities 3","text":"go , following:Review code run far. Try identify commonalities plot's code bits code might change using different dataset.Review code run far. Try identify commonalities plot's code bits code might change using different dataset.Take moment recognise complexity code now able read.Take moment recognise complexity code now able read.violin-boxplot, geom = \"point\", try changing fun medianFor violin-boxplot, geom = \"point\", try changing fun medianFor violin-boxplot, geom = \"errorbar\", try changing fun.data mean_cl_normal (95% CI)Go back grouped density plots try changing transparency alpha.","code":"\nggplot(dat_long, aes(x = condition, y= rt)) +\n  geom_violin() +\n  # remove the median line with fatten = NULL\n  geom_boxplot(width = .2, fatten = NULL) +\n  stat_summary(fun = \"median\", geom = \"point\") +\n  stat_summary(fun.data = \"mean_se\", \n               geom = \"errorbar\", \n               width = .1)\nggplot(dat_long, aes(x = condition, y= rt)) +\n  geom_violin() +\n  # remove the median line with fatten = NULL\n  geom_boxplot(width = .2, fatten = NULL) +\n  stat_summary(fun = \"mean\", geom = \"point\") +\n  stat_summary(fun.data = \"mean_cl_normal\", \n               geom = \"errorbar\", \n               width = .1)\nggplot(dat_long, aes(x = rt, fill = condition)) +\n  geom_density(alpha = .4)+\n  scale_x_continuous(name = \"Reaction time (ms)\") +\n  scale_fill_discrete(name = \"Condition\",\n                      labels = c(\"Word\", \"Non-word\"))"},{"path":"multi-part-plots.html","id":"multi-part-plots","chapter":"5 Multi-part Plots","heading":"5 Multi-part Plots","text":"","code":""},{"path":"multi-part-plots.html","id":"interaction-plots","chapter":"5 Multi-part Plots","heading":"5.1 Interaction plots","text":"Interaction plots commonly used help display interpret factorial design. Just bar chart means, interaction plots represent data summaries built series calls stat_summary().shape acts much like fill previous plots, except rather producing different colour fills level IV, data points given different shapes.shape acts much like fill previous plots, except rather producing different colour fills level IV, data points given different shapes.size lets change size lines points. want different groups different sizes (example, sample size study showing results meta-analysis population city map), set inside aes() function; want change size groups, set inside relevant geom_*() function'.size lets change size lines points. want different groups different sizes (example, sample size study showing results meta-analysis population city map), set inside aes() function; want change size groups, set inside relevant geom_*() function'.scale_color_manual() works much like scale_color_discrete() except lets specify colour values manually, instead automatically applied based palette. can specify RGB colour values list predefined colour names -- available options can found running colours() console. manual scales also available, example, scale_fill_manual().scale_color_manual() works much like scale_color_discrete() except lets specify colour values manually, instead automatically applied based palette. can specify RGB colour values list predefined colour names -- available options can found running colours() console. manual scales also available, example, scale_fill_manual().\nFigure 5.1: Interaction plot.\ncan use redundant aesthetics, indicating language groups using colour shape, order increase accessibility colourblind readers images printed greyscale.","code":"\nggplot(dat_long, aes(x = condition, y = rt, \n                     shape = language,\n                     group = language,\n                     color = language)) +\n  stat_summary(fun = \"mean\", geom = \"point\", size = 3) +\n  stat_summary(fun = \"mean\", geom = \"line\") +\n  stat_summary(fun.data = \"mean_se\", geom = \"errorbar\", width = .2) +\n  scale_color_manual(values = c(\"blue\", \"darkorange\")) +\n  theme_classic()"},{"path":"multi-part-plots.html","id":"combined-interaction-plots","chapter":"5 Multi-part Plots","heading":"5.2 Combined interaction plots","text":"complex interaction plot can produced takes advantage layers visualise overall interaction, change across conditions participant.code complex prior code use universal mapping plot aesthetics. code far, aesthetic mapping (aes) plot specified first line code layers used mapping. However, also possible layer use different mapping -- encourage build plot running line code sequentially see combines.first call ggplot() sets default mappings plot used unless otherwise specified - x, y group variable. Note addition shape, vary shape geom according language variable.geom_point() overrides default mapping setting colour draw data points language group different colour. alpha set low value aid readability.Similarly, geom_line() overrides default grouping variable line drawn connect individual data points participant (group = id) rather language group, also sets colours.Finally, calls stat_summary() remain largely , exception setting colour = \"black\" size = 2 overall means error bars can easily distinguished individual data points. specify individual mapping, use defaults (e.g., lines connected language group). error bars, lines made solid.\nFigure 5.2: Interaction plot -participant data.\n","code":"\nggplot(dat_long, aes(x = condition, y = rt, \n                     group = language, shape = language)) +\n  # adds raw data points in each condition\n  geom_point(aes(colour = language),alpha = .2) +\n  # add lines to connect each participant's data points across conditions\n  geom_line(aes(group = id, colour = language), alpha = .2) +\n  # add data points representing cell means\n  stat_summary(fun = \"mean\", geom = \"point\", size = 2, colour = \"black\") +\n  # add lines connecting cell means by condition\n  stat_summary(fun = \"mean\", geom = \"line\", colour = \"black\") +\n  # add errorbars to cell means\n  stat_summary(fun.data = \"mean_se\", geom = \"errorbar\", \n               width = .2, colour = \"black\") +\n  # change colours and theme\n  scale_color_brewer(palette = \"Dark2\") +\n  theme_minimal()"},{"path":"multi-part-plots.html","id":"facets","chapter":"5 Multi-part Plots","heading":"5.3 Facets","text":"far produced single plots display desired variables. However, situations may useful create separate plots level variable. can also help accessibility used instead addition group colours. code adaptation code used produce grouped scatterplot (see Figure 4.8) may easier see relationship changes data overlaid.Rather using colour = condition produce different colours level condition, variable instead passed facet_wrap().Set number rows nrow number columns ncol. specify , facet_wrap() make best guess.\nFigure 5.3: Faceted scatterplot\nanother example, can use facet_wrap() alternative grouped violin-boxplot (see Figure 4.9) variable language passed facet_wrap() rather fill. Using tilde (~) specify factor faceted alternative using facets = vars(factor) like . may find helpful translate ~ , e.g., facet plot language.\nFigure 5.4: Facted violin-boxplot\nFinally, note one way edit labels faceted variables involves converting language column factor. allows set order levels labels display.\nFigure 5.5: Faceted violin-boxplot updated labels\n","code":"\nggplot(dat_long, aes(x = rt, y = age)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  facet_wrap(facets = vars(condition), nrow = 2)\nggplot(dat_long, aes(x = condition, y= rt)) +\n  geom_violin() +\n  geom_boxplot(width = .2, fatten = NULL) +\n  stat_summary(fun = \"mean\", geom = \"point\") +\n  stat_summary(fun.data = \"mean_se\", geom = \"errorbar\", width = .1) +\n  facet_wrap(~language) +\n  theme_minimal()\nggplot(dat_long, aes(x = condition, y= rt)) +\n  geom_violin() +\n  geom_boxplot(width = .2, fatten = NULL) +\n  stat_summary(fun = \"mean\", geom = \"point\") +\n  stat_summary(fun.data = \"mean_se\", geom = \"errorbar\", width = .1) +\n  facet_wrap(~factor(language, \n                     levels = c(\"monolingual\", \"bilingual\"),\n                     labels = c(\"Monolingual participants\", \n                                \"Bilingual participants\"))) +\n  theme_minimal()"},{"path":"multi-part-plots.html","id":"storing-plots","chapter":"5 Multi-part Plots","heading":"5.4 Storing plots","text":"Just like datasets, plots can saved objects. code saves histograms produced reaction time accuracy objects named p1 p2. plots can viewed calling object name console.Importantly, layers can added saved objects. example, code adds theme plot saved p1 saves new object p3. important many examples ggplot2 code find online help forums use p + format build plots fail explain means, can confusing beginners.","code":"\np1 <- ggplot(dat_long, aes(x = rt)) +\n  geom_histogram(binwidth = 10, color = \"black\")\n\np2 <- ggplot(dat_long, aes(x = acc)) +\n  geom_histogram(binwidth = 1, color = \"black\") \np3 <- p1 + theme_minimal()"},{"path":"multi-part-plots.html","id":"saving-plots-as-images","chapter":"5 Multi-part Plots","heading":"5.5 Saving plots as images","text":"addition saving plots objects use R, function ggsave() can used save plots images hard drive. required argument ggsave file name image file create, complete file extension (can \"eps\", \"ps\", \"tex\", \"pdf\", \"jpeg\", \"tiff\", \"png\", \"bmp\", \"svg\" \"wmf\"). default, ggsave() save last plot displayed. However, can also specify specific plot object one saved.width, height resolution image can manually adjusted. Fonts scale sizes, may look different preview images see Viewer tab. help documentation useful (type ?ggsave console access help).","code":"\nggsave(filename = \"my_plot.png\") # save last displayed plot\nggsave(filename = \"my_plot.png\", plot = p3) # save plot p3"},{"path":"multi-part-plots.html","id":"multiple-plots","chapter":"5 Multi-part Plots","heading":"5.6 Multiple plots","text":"well creating separate plots level variable using facet_wrap(), may also wish display multiple different plots together. patchwork package provides intuitive way . loaded library(patchwork), simply need save plots wish combine objects use operators +, / () | specify layout final figure.","code":""},{"path":"multi-part-plots.html","id":"combining-two-plots","chapter":"5 Multi-part Plots","heading":"5.6.1 Combining two plots","text":"Two plots can combined side--side stacked top . combined plots also saved object passed ggsave.\nFigure 5.6: Side--side plots patchwork\n\nFigure 5.7: Stacked plots patchwork\n","code":"\np1 + p2 # side-by-side\np1 / p2 # stacked"},{"path":"multi-part-plots.html","id":"combining-three-or-more-plots","chapter":"5 Multi-part Plots","heading":"5.6.2 Combining three or more plots","text":"Three plots can combined number ways. patchwork syntax relatively easy grasp examples bit trial error. exact layout plots depend upon number factors. Create three plots names p1, p2 p3 try running examples . Adjust use operators see change layout. line code draw different figure.","code":"\np1 / p2 / p3\n(p1 + p2) / p3\np2 | p2 / p3"},{"path":"multi-part-plots.html","id":"customisation-part-4","chapter":"5 Multi-part Plots","heading":"5.7 Customisation part 4","text":"","code":""},{"path":"multi-part-plots.html","id":"axis-labels","chapter":"5 Multi-part Plots","heading":"5.7.1 Axis labels","text":"Previously edited main axis labels used scale_* functions. functions useful know allow customise many aspects scale, breaks limits. However, need change main axis name, quicker way using labs(). code adds layer plot changes axis labels histogram saved p1 adds title subtitle. title subtitle conform APA standards (APA formatting additional resources), however, presentations social media can useful.\nFigure 5.8: Plot edited labels title\ncan also use labs() remove axis labels, example, try adjusting code x = NULL.","code":"\np1 + labs(x = \"Mean reaction time (ms)\",\n          y = \"Number of participants\",\n          title = \"Distribution of reaction times\",\n          subtitle = \"for 100 participants\")"},{"path":"multi-part-plots.html","id":"redundant-aesthetics","chapter":"5 Multi-part Plots","heading":"5.7.2 Redundant aesthetics","text":"far produced plots colours, colours way different levels variable indicated, sometimes preferable indicate levels colour means, facets x-axis categories.code adds fill = language violin-boxplots also faceted language. adjust alpha use brewer colour palette customise colours. Specifying fill variable means default, R produces legend variable. However, use colour redundant facet labels, can remove legend guides function.\nFigure 3.7: Violin-boxplot redundant facets fill.\n","code":"\nggplot(dat_long, aes(x = condition, y= rt, fill = language)) +\n  geom_violin(alpha = .4) +\n  geom_boxplot(width = .2, fatten = NULL, alpha = .6) +\n  stat_summary(fun = \"mean\", geom = \"point\") +\n  stat_summary(fun.data = \"mean_se\", geom = \"errorbar\", width = .1) +\n  facet_wrap(~factor(language, \n                     levels = c(\"monolingual\", \"bilingual\"),\n                     labels = c(\"Monolingual participants\", \n                                \"Bilingual participants\"))) +\n  theme_minimal() +\n  scale_fill_brewer(palette = \"Dark2\") +\n  guides(fill = \"none\")"},{"path":"multi-part-plots.html","id":"activities-4","chapter":"5 Multi-part Plots","heading":"5.8 Activities 4","text":"go , following:Rather mapping variables (condition language) single interaction plot individual participant data, instead produce faceted plot separates monolingual bilingual data. visual elements remain (colours shapes) also take care redundant legends.Choose favourite three plots produced far tutorial, tidy axis labels, preferred colour scheme, necessary titles, combine using patchwork. feeling particularly proud , post Twitter using #PsyTeachR.","code":"\nggplot(dat_long, aes(x = condition, y = rt, group = language, shape = language)) +\n  geom_point(aes(colour = language),alpha = .2) +\n  geom_line(aes(group = id, colour = language), alpha = .2) +\n  stat_summary(fun = \"mean\", geom = \"point\", size = 2, colour = \"black\") +\n  stat_summary(fun = \"mean\", geom = \"line\", colour = \"black\") +\n  stat_summary(fun.data = \"mean_se\", geom = \"errorbar\", width = .2, colour = \"black\") +\n  theme_minimal() +\n  facet_wrap(~language) +\n  guides(shape = FALSE, colour = FALSE) \n# this wasn't easy so if you got it, well done!"},{"path":"advanced-plots.html","id":"advanced-plots","chapter":"6 Advanced Plots","heading":"6 Advanced Plots","text":"tutorial scratched surface visualisation options available using R. additional online resources provide advanced plots customisation options readers feeling confident content covered tutorial. However, plots give idea possible, represent favourite plots authorship team.use custom functions: geom_split_violin() geom_flat_violin(), can access introdataviz package. functions modified (Allen et al., 2021).","code":"\n# how to install the introdataviz package to get split and half violin plots\ndevtools::install_github(\"psyteachr/introdataviz\")"},{"path":"advanced-plots.html","id":"split-violin-plots","chapter":"6 Advanced Plots","heading":"6.1 Split-violin plots","text":"Split-violin plots remove redundancy mirrored violin plots make easier compare distributions multiple conditions.\nFigure 6.1: Split-violin plot\n","code":"\nggplot(dat_long, aes(x = condition, y = rt, fill = language)) +\n  introdataviz::geom_split_violin(alpha = .4, trim = FALSE) +\n  geom_boxplot(width = .2, alpha = .6, fatten = NULL, show.legend = FALSE) +\n  stat_summary(fun.data = \"mean_se\", geom = \"pointrange\", show.legend = F, \n               position = position_dodge(.175)) +\n  scale_x_discrete(name = \"Condition\", labels = c(\"Non-word\", \"Word\")) +\n  scale_y_continuous(name = \"Reaction time (ms)\",\n                     breaks = seq(200, 800, 100), \n                     limits = c(200, 800)) +\n  scale_fill_brewer(palette = \"Dark2\", name = \"Language group\") +\n  theme_minimal()"},{"path":"advanced-plots.html","id":"raincloud-plots","chapter":"6 Advanced Plots","heading":"6.2 Raincloud plots","text":"Raincloud plots combine density plot, boxplot, raw data points, desired summary statistics complete visualisation data. called density plot plus raw data reminiscent rain cloud.\nFigure 6.2: Raincloud plot. point line centre cloud represents mean 95% CI. rain respresents individual data points.\n","code":"\nrain_height <- .1\n\nggplot(dat_long, aes(x = \"\", y = rt, fill = language)) +\n  # clouds\n  introdataviz::geom_flat_violin(trim=FALSE, alpha = 0.4,\n    position = position_nudge(x = rain_height+.05)) +\n  # rain\n  geom_point(aes(colour = language), size = 2, alpha = .5, show.legend = FALSE, \n              position = position_jitter(width = rain_height, height = 0)) +\n  # boxplots\n  geom_boxplot(width = rain_height, alpha = 0.4, show.legend = FALSE, \n               outlier.shape = NA,\n               position = position_nudge(x = -rain_height*2)) +\n  # mean and SE point in the cloud\n  stat_summary(fun.data = mean_cl_normal, mapping = aes(color = language), show.legend = FALSE,\n               position = position_nudge(x = rain_height * 3)) +\n  # adjust layout\n  scale_x_discrete(name = \"\", expand = c(rain_height*3, 0, 0, 0.7)) +\n  scale_y_continuous(name = \"Reaction time (ms)\",\n                     breaks = seq(200, 800, 100), \n                     limits = c(200, 800)) +\n  coord_flip() +\n  facet_wrap(~factor(condition, \n                     levels = c(\"word\", \"nonword\"), \n                     labels = c(\"Word\", \"Non-Word\")), \n             nrow = 2) +\n  # custom colours and theme\n  scale_fill_brewer(palette = \"Dark2\", name = \"Language group\") +\n  scale_colour_brewer(palette = \"Dark2\") +\n  theme_minimal() +\n  theme(panel.grid.major.y = element_blank(),\n        legend.position = c(0.8, 0.8),\n        legend.background = element_rect(fill = \"white\", color = \"white\"))"},{"path":"advanced-plots.html","id":"ridge-plots","chapter":"6 Advanced Plots","heading":"6.3 Ridge plots","text":"Ridge plots series density plots show distribution values several groups. Figure 6.3 shows data (Nation, 2017) demonstrates effective type visualisation can convey lot information intuitively whilst visually attractive.\nFigure 6.3: ridge plot.\n","code":"\n# read in data from Nation et al. 2017\ndata <- read_csv(\"https://raw.githubusercontent.com/zonination/perceptions/master/probly.csv\", col_types = \"d\")\n\n# convert to long format and percents\nlong <- pivot_longer(data, cols = everything(),\n                     names_to = \"label\",\n                     values_to = \"prob\") %>%\n  mutate(label = factor(label, names(data), names(data)),\n         prob = prob/100)\n\n# ridge plot\nggplot(long, aes(x = prob, y = label, fill = label)) + \n  ggridges::geom_density_ridges(scale = 2, show.legend = FALSE) +\n  scale_x_continuous(name = \"Assigned Probability\", \n                     limits = c(0, 1), labels = scales::percent) +\n  # control space at top and bottom of plot\n  scale_y_discrete(name = \"\", expand = c(0.02, 0, .08, 0)) + \n  scale_fill_viridis_d(option = \"D\") # colourblind-safe colours"},{"path":"advanced-plots.html","id":"alluvial-plots","chapter":"6 Advanced Plots","heading":"6.4 Alluvial plots","text":"Alluvial plots visualise multi-level categorical data flows can easily traced diagram.\nFigure 6.4: alluvial plot showing progression student grades years.\n","code":"\nlibrary(ggalluvial)\n\n# simulate data for 4 years of grades from 500 students\n# with a correlation of 0.75 from year to year\n# and a slight increase each year\ndat <- faux::sim_design(\n  within = list(year = c(\"Y1\", \"Y2\", \"Y3\", \"Y4\")),\n  n = 500,\n  mu = c(Y1 = 0, Y2 = .2, Y3 = .4, Y4 = .6), r = 0.75, \n  dv = \"grade\", long = TRUE, plot = FALSE) %>%\n  # convert numeric grades to letters with a defined probability\n  mutate(grade = faux::norm2likert(grade, prob = c(\"3rd\" = 5, \"2.2\" = 10, \"2.1\" = 40, \"1st\" = 20)),\n         grade = factor(grade, c(\"1st\", \"2.1\", \"2.2\", \"3rd\"))) %>%\n  # reformat data and count each combination\n  tidyr::pivot_wider(names_from = year, values_from = grade) %>%\n  dplyr::count(Y1, Y2, Y3, Y4)\n\n# plot data with colours by Year1 grades\nggplot(dat, aes(y = n, axis1 = Y1, axis2 = Y2, axis3 = Y3, axis4 = Y4)) +\n  geom_alluvium(aes(fill = Y4), width = 1/6) +\n  geom_stratum(fill = \"grey\", width = 1/3, color = \"black\") +\n  geom_label(stat = \"stratum\", aes(label = after_stat(stratum))) +\n  scale_fill_viridis_d(name = \"Final Classification\") +\n  theme_minimal() +\n  theme(legend.position = \"top\")"},{"path":"advanced-plots.html","id":"maps","chapter":"6 Advanced Plots","heading":"6.5 Maps","text":"Working maps can tricky. sf package provides functions work ggplot2, geom_sf(). rnaturalearth package provides high-quality mapping coordinates.\nFigure 6.5: Map coloured country.\n","code":""},{"path":"conclusion.html","id":"conclusion","chapter":"7 Conclusion","heading":"7 Conclusion","text":"tutorial aimed provide practical introduction common data visualisation techniques using R. Whilst number plots produced tutorial can created point--click software, underlying skill-set developed making visualisations powerful extendable.hope tutorial serves jumping point encourage researchers adopt reproducible workflows open-access software, addition beautiful data visualisations.","code":""},{"path":"additional-resources.html","id":"additional-resources","chapter":"A Additional resources","heading":"A Additional resources","text":"number incredible open-access online resources , using skills developed tutorial, allow start adapting figures plots make informative possible reader. Additionally, also many excellent resources expand topics covered briefly, particularly data wrangling, can help consolidate expand skill set.PsyTeachRThe psyTeachR team University Glasgow School Psychology Institute Neuroscience Psychology successfully made transition teaching reproducible research using R across undergraduate postgraduate levels. curriculum now emphasizes essential ‘data science’ graduate skills overlooked traditional approaches teaching, including programming skills, data visualisation, data wrangling reproducible reports. Students learn probability inference data simulation well working real datasets. materials cover functions used tutorial depth Creative Commons licences allow use reuse without attribution.Level 1 Data SkillsLevel 2 AnalysesLevel 3 Statistical ModelsMsc Fundamentals Quantititive AnalysisMSc Data Skills Reproducible ResearchInstalling R RStudioInstalling R - PsyTeachRRunning R computer (walkthrough videos) - Danielle NavarroIntro R RStudioRStudio Essentials: Programming - Part 1 (Writing code RStudio)RStudio Essentials: Programming - Part 2 (Debugging code RStudio)R MarkdownIntroduction R MarkdownR Markdown: Definitive GuideData wranglingR Data ScienceText Mining RData visualisationR Graph GalleryFundamentals Data VizualisationData Vizualisation: Practical Introduction","code":""},{"path":"additional-customisation-options.html","id":"additional-customisation-options","chapter":"B Additional customisation options","heading":"B Additional customisation options","text":"","code":""},{"path":"additional-customisation-options.html","id":"adding-lines-to-plots","chapter":"B Additional customisation options","heading":"B.1 Adding lines to plots","text":"Vertical Lines - geom_vline()Often can useful put marker plots highlight certain criterion value. example, working scale cut-, perhaps Austim Spectrum Quotient 10 (Allison et al., 2012), might want put line score 7; point researchers suggest participant referred . Alternatively, thinking Stroop test looked paper, perhaps level accuracy wanted make sure reached - say 80%. refer back Figure 3.1, used code :displayed spread accuracy scores :\nFigure B.1: Histogram accuracy scores.\nwanted add line 80% level use geom_vline() function, ggplot2, argument xintercept = 80, meaning cut x-axis 80, follows:\nFigure B.2: Histogram accuracy scores black solid vertical line indicating 80% accuracy.\nNow looks ok line bit hard see can change style (linetype = value), color (color = \"color\") weight (size = value) follows:\nFigure B.3: Histogram accuracy scores red dashed vertical line indicating 80% accuracy.\nHorizontal Lines - geom_hline()Another situation may want put horizontal line figure mark value interest y-axis. thinking Stroop experiment, perhaps wanted indicate 80% accuracy line boxplot figures. look Figure 4.1, used code display basic boxplot:\nFigure B.4: Basic boxplot.\nuse geom_hline() function, ggplot2, , time, argument yintercept = 80, meaning cut y-axis 80, follows:\nFigure B.5: Basic boxplot black solid horizontal line indicating 80% accuracy.\ncan embellish line using arguments . put different values just show changes:\nFigure B.6: Basic boxplot blue dotted horizontal line indicating 80% accuracy.\nLineTypesOne thing worth noting linetype argument can actually specified value word. match follows:Diagonal Lines - geom_abline()last type line might want overlay figure perhaps diagonal line. example, perhaps created scatterplot want true diagonal line reference line best fit. show , refer back Figure 3.5 displayed line best fit reaction time versus age, used following code:\nFigure B.7: Line best fit reaction time versus age.\neye appear fairly flat relationship add true diagonal help clarify. use geom_abline(), ggplot2, give arguements slope (slope  = value) intercept (intercept = value). also going scale data turn z-scores help us visualise relationship better, follows:\nFigure B.8: Line best fit (blue line) reaction time versus age true diagonal shown (black line).\nnow can see line best fit (blue line) relation true diagonal (black line). come back z-scored data minute, first finish tidying figure, using customisation seen bit messy. Something like might look cleaner:\nFigure B.9: Line best fit (blue solid line) reaction time versus age true diagonal shown (black line dashed).\nmaybe looks bit cluttered gives nice example can use different geoms adding lines add information figure, clearly visualising weak relationship reaction time age. Note: remember layering system however; notice code Figure B.9 changed order code lines geom lines behind points!Top Tip: intercepts must values can seeThinking back z-scored data last figure, sort skipped , serve purpose. original data original scatterplot geom_abline() added code:\nFigure B.10: Line best fit (blue solid line) reaction time versus age missing true diagonal.\ncode runs diagonal line nowhere seen. reason figure zoomed data diagonal \"shot\" like. zoom data see diagonal line :\nFigure B.11: Zoomed show Line best fit (blue solid line) reaction time versus age true diagonal (black line).\nkey point intercepts set visible values see ! run code line appear, check value set can actually seen figure. applies geom_abline(), geom_hline() geom_vline().","code":"\nggplot(dat_long, aes(x = acc)) +\n  geom_histogram(binwidth = 1, fill = \"white\", color = \"black\") +\n  scale_x_continuous(name = \"Accuracy (0-100)\")\nggplot(dat_long, aes(x = acc)) +\n  geom_histogram(binwidth = 1, fill = \"white\", color = \"black\") +\n  scale_x_continuous(name = \"Accuracy (0-100)\") +\n  geom_vline(xintercept = 80)\nggplot(dat_long, aes(x = acc)) +\n  geom_histogram(binwidth = 1, fill = \"white\", color = \"black\") +\n  scale_x_continuous(name = \"Accuracy (0-100)\") +\n  geom_vline(xintercept = 80, linetype = 2, color = \"red\", size = 1.5)\nggplot(dat_long, aes(x = condition, y = acc)) +\n  geom_boxplot()\nggplot(dat_long, aes(x = condition, y = acc)) +\n  geom_boxplot() +\n  geom_hline(yintercept = 80)\nggplot(dat_long, aes(x = condition, y = acc)) +\n  geom_boxplot() +\n  geom_hline(yintercept = 80, linetype = 3, color = \"blue\", size = 2)\nggplot(dat_long, aes(x = rt, y = age)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\ndat_long_scale <- dat_long %>%\n  mutate(rt_zscore = (rt - mean(rt))/sd(rt),\n         age_zscore = (age - mean(age))/sd(age))\n\nggplot(dat_long_scale, aes(x = rt_zscore, y = age_zscore)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  geom_abline(slope = 1, intercept = 0)\nggplot(dat_long_scale, aes(x = rt_zscore, y = age_zscore)) +\n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\", color = \"black\", size = .5) +\n  geom_hline(yintercept = 0, linetype = \"solid\", color = \"black\", size = .5) +\n  geom_vline(xintercept = 0, linetype = \"solid\", color = \"black\", size = .5) + \n  geom_point() +\n    geom_smooth(method = \"lm\")\nggplot(dat_long, aes(x = rt, y = age)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  geom_abline(slope = 1, intercept = 0)\nggplot(dat_long, aes(x = rt, y = age)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  geom_abline(slope = 1, intercept = 0) +\n  coord_cartesian(xlim = c(0,1000), ylim = c(0,60))"},{"path":"additional-customisation-options.html","id":"zooming-in-and-out","chapter":"B Additional customisation options","heading":"B.2 Zooming in and out","text":"Like example , can beneficial able zoom figures, mainly focus frame given section. One function can use coord_cartesian(), ggplot2. main arguments limits x-axis (xlim = c(value, value)), limits y-axis (ylim = c(value, value)), whether add small expansion limits (expand = TRUE/FALSE). Looking scatterplot age reaction time , use coord_cartesian() zoom fully :\nFigure B.12: Zoomed scatterplot expansion around set limits\ncan add small expansion changing expand argument TRUE:\nFigure B.13: Zoomed scatterplot small expansion around set limits\ncan zoom right specific area plot something wanted highlight. example just showing reaction times 500 725 msecs, ages 15 55:\nFigure B.14: Zoomed scatterplot small expansion around set limits\ncan zoom zoom just x-axis just y-axis; just depends want show.","code":"\nggplot(dat_long, aes(x = rt, y = age)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  coord_cartesian(xlim = c(0,1000), ylim = c(0,100), expand = FALSE)\nggplot(dat_long, aes(x = rt, y = age)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  coord_cartesian(xlim = c(0,1000), ylim = c(0,100), expand = TRUE)\nggplot(dat_long, aes(x = rt, y = age)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  coord_cartesian(xlim = c(500,725), ylim = c(15,55), expand = TRUE)"},{"path":"additional-customisation-options.html","id":"setting-the-axis-values","chapter":"B Additional customisation options","heading":"B.3 Setting the axis values","text":"Continuous scalesYou may noticed depending spread data, much figure see, values axes tend change. Often want want values constant. already used functions control main body paper - scale_* functions. use scale_x_continuous() scale_y_continuous() set values axes want. main arguments functions limits (limts = c(value, value)) breaks (tick marks essentially, breaks = value:value). Note limits just two values (minimum maximum), whereas breaks series values (0 100, example). use scatterplot age reaction time, code might look like :\nFigure B.15: Changing values axes\nactually looks rubbish simply many values axes, can use seq() function, baseR, get bit control. arguments first value (= value), last value (last = value), size steps (= value). example, seq(0,10,2) give values 0 10 steps 2, (.e. 0, 2, 4, 6, 8 10). using idea can change y-axis steps 5 (years) x-axis steps 50 (msecs) follows:\nFigure B.16: Changing values axes using seq() function\ngives us much nicer cleaner set values axes. combine approach setting axes values zoom function (coord_cartesian()), can get something looks like :\nFigure B.17: Combining scale functions zoom functions\nactually looks much like original scatterplot better definition axes. can see can actually lot control axes see. However, one thing note, use limits argument within scale_* functions zoom. work like instead just disregard data. Look example:\nFigure B.18: Combining scale functions zoom functions\nmay look like zoomed data actually removed data outwith limits. warnings telling , can see data limits, know based earlier plots. scale_* functions can change values axes, coord_cartesian() zooming .Discrete scalesThe idea limits within scale_* function can also used change order categories discrete scale. example look boxplots Figure 4.10, see figure:\nFigure B.19: Using transparency fill color.\nfigures always default alphabetical order. Sometimes want; sometimes want. wanted switch order word non-word non-word condition comes first use scale_x_discrete() function set limits within (limits = c(\"category\",\"category\")) follows:\nFigure B.20: Switching orders categorical variables\nworks just conditions, see compare Figure B.20 figure flipped order non-word word original default alphabetical order\nFigure B.21: earlier figure order conditions x-axis altered.\nChanging Order FactorsAgain, lot control beyond default alphabetical order ggplot2 tends plot . One question might though monolingual bilingual alphabetical order? f bilingual condition plotted first. answer , thinking back start paper, changed conditions 1 2 factor names monolingual bilingual, ggplot() maintains factor order plotting. want plot different fashion need bit factor reordering. can done much like earlier using factor() function stating order conditions want (levels = c(\"factor\",\"factor\")). careful spelling must match names factors already exist.example, reorder factors bilingual presented first leave order word non-word alphabetical default. Note code though permanently storing factor change want keep new order. just changing order \"fly\" one example putting plot.\nFigure B.22: earlier figure order conditions x-axis altered.\ncompare new figure original, side--side, see difference:\nFigure B.23: Switching factor orders\n","code":"\nggplot(dat_long, aes(x = rt, y = age)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  scale_x_continuous(limits = c(0,1000), breaks = 0:1000) +\n  scale_y_continuous(limits = c(0,100), breaks = 0:100)\nggplot(dat_long, aes(x = rt, y = age)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  scale_x_continuous(limits = c(0,1000), breaks = seq(0,1000,50)) +\n  scale_y_continuous(limits = c(0,100), breaks = seq(0,100,5))\nggplot(dat_long, aes(x = rt, y = age)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  scale_x_continuous(limits = c(0,1000), breaks = seq(0,1000,50)) +\n  scale_y_continuous(limits = c(0,100), breaks = seq(0,100,5)) +\n  coord_cartesian(xlim = c(250,750), ylim = c(15,55))\nggplot(dat_long, aes(x = rt, y = age)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  scale_x_continuous(limits = c(500,600))## Warning: Removed 166 rows containing non-finite values (stat_smooth).## Warning: Removed 166 rows containing missing values (geom_point).\nggplot(dat_long, aes(x = condition, y= rt, fill = condition)) +\n  geom_violin(alpha = .4) +\n  geom_boxplot(width = .2, fatten = NULL, alpha = .5) +\n  stat_summary(fun = \"mean\", geom = \"point\") +\n  stat_summary(fun.data = \"mean_se\", geom = \"errorbar\", width = .1) +\n  scale_fill_brewer(palette = \"Dark2\") +\n  theme_minimal()\nggplot(dat_long, aes(x = condition, y= rt, fill = condition)) +\n  geom_violin(alpha = .4) +\n  geom_boxplot(width = .2, fatten = NULL, alpha = .5) +\n  stat_summary(fun = \"mean\", geom = \"point\") +\n  stat_summary(fun.data = \"mean_se\", geom = \"errorbar\", width = .1) +\n  scale_fill_brewer(palette = \"Dark2\") +\n  scale_x_discrete(limits = c(\"nonword\",\"word\")) + \n  theme_minimal()\nggplot(dat_long, aes(x = condition, y= rt, fill = language)) +\n  geom_violin() +\n  geom_boxplot(width = .2, fatten = NULL, position = position_dodge(.9)) +\n  stat_summary(fun = \"mean\", geom = \"point\", \n               position = position_dodge(.9)) +\n  stat_summary(fun.data = \"mean_se\", geom = \"errorbar\", width = .1,\n               position = position_dodge(.9)) +\n  scale_fill_brewer(palette = \"Dark2\") +\n  scale_x_discrete(limits = c(\"nonword\",\"word\")) + \n  theme_minimal()\ndat_long %>% \n  mutate(language = factor(language, \n                           levels = c(\"bilingual\",\"monolingual\"))) %>%\n  ggplot(aes(x = condition, y= rt, fill = language)) +\n  geom_violin() +\n  geom_boxplot(width = .2, fatten = NULL, position = position_dodge(.9)) +\n  stat_summary(fun = \"mean\", geom = \"point\", \n               position = position_dodge(.9)) +\n  stat_summary(fun.data = \"mean_se\", geom = \"errorbar\", width = .1,\n               position = position_dodge(.9)) +\n  scale_fill_brewer(palette = \"Dark2\") +\n  theme_minimal()"},{"path":"additional-customisation-options.html","id":"controlling-the-legend","chapter":"B Additional customisation options","heading":"B.4 Controlling the Legend","text":"Using guides()Whilst subject changing order position elements figure, might think changing position figure legend. actually ways simple approach use guides() function add ggplot chain. example, run code look output:\nFigure B.24: Figure Legend removed using guides()\nsee display Figure B.19 legend. quite useful legend just repeats x-axis becomes redundant. guides() function works setting legened associated fill layer (.e. fill = condition) \"none\", basically removing . One thing note approach need set guide every legend, otherwise legend appear. means set fill = condition color = condition, need set fill color \"none\" within guides() follows:\nFigure B.25: Removing one legend guides()\nWhereas used guides() see following:\nFigure B.26: Figure one Legend\nkey thing note figure actually two legends (one fill one color) overlaid top associated variable. can test removing either one options guides() function. One legends still remain. need turn can use leave certain parts clear.Using theme()alternative guides function using theme() function. theme() function can actually used control whole host options plot, come , can use quick way turn legend follows:\nFigure B.27: Removing legend theme()\ncan see within theme() function set argument legend.position set \"none\" - removing legend entirely. One difference note removes aspects legend , said, using guides() allows control different parts legend (either leaving fill color showing ). using legend.position = \"none\" bit brute force can handy using various different means distinguishing conditions variable want remove aspect using guides().extension course just removing legend, moving legend different position. can done setting legend.position = ... either \"top\", \"bottom\", \"left\" \"right\" shown:\nFigure B.28: Legend position options using theme()\neven coordinate within figure expressed propotion figure - .e. c(x = 0, y = 0) bottom left figure c(x = 1, y = 1) top right, shown :\nFigure B.29: Legend position options using theme()\nlittle trial error can position legend want without crashing figure, hopefully!","code":"\nggplot(dat_long, aes(x = condition, y= rt, fill = condition)) +\n  geom_violin(alpha = .4) +\n  geom_boxplot(width = .2, fatten = NULL, alpha = .5) +\n  stat_summary(fun = \"mean\", geom = \"point\") +\n  stat_summary(fun.data = \"mean_se\", geom = \"errorbar\", width = .1) +\n  scale_fill_brewer(palette = \"Dark2\") +\n  guides(fill = \"none\") +\n  theme_minimal()\nggplot(dat_long, aes(x = condition, y= rt, fill = condition, color = condition)) +\n  geom_violin(alpha = .4) +\n  geom_boxplot(width = .2, fatten = NULL, alpha = .5) +\n  stat_summary(fun = \"mean\", geom = \"point\") +\n  stat_summary(fun.data = \"mean_se\", geom = \"errorbar\", width = .1) +\n  scale_fill_brewer(palette = \"Dark2\") +\n  guides(fill = \"none\", color = \"none\") +\n  theme_minimal()\nggplot(dat_long, aes(x = condition, y= rt, fill = condition, color = condition)) +\n  geom_violin(alpha = .4) +\n  geom_boxplot(width = .2, fatten = NULL, alpha = .5) +\n  stat_summary(fun = \"mean\", geom = \"point\") +\n  stat_summary(fun.data = \"mean_se\", geom = \"errorbar\", width = .1) +\n  scale_fill_brewer(palette = \"Dark2\") +\n  theme_minimal()\nggplot(dat_long, aes(x = condition, y= rt, fill = condition, color = condition)) +\n  geom_violin(alpha = .4) +\n  geom_boxplot(width = .2, fatten = NULL, alpha = .5) +\n  stat_summary(fun = \"mean\", geom = \"point\") +\n  stat_summary(fun.data = \"mean_se\", geom = \"errorbar\", width = .1) +\n  scale_fill_brewer(palette = \"Dark2\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")"},{"path":"additional-customisation-options.html","id":"setting-a-lab-theme-using-theme","chapter":"B Additional customisation options","heading":"B.5 Setting A Lab Theme using theme()","text":"theme() function, mentioned, lot just change position legend can used really control variety elements eventually create \"theme\" figures - say want consistent look figures across publications across lab posters. try show , first lets start basic plot seen :BIT NEEDS WORK\nFigure B.30: buidling something like idea\n","code":"\n# set up custom theme to add to all plots\nmytheme <- theme_minimal(     # always start with a base theme_****\n  base_size = 16,             # 16-point font (adjusted for axes)\n  base_family = \"Helvetica\"   # font style\n) +                           # add more specific customisations with theme()\ntheme(\n  text             = element_text(color = \"white\"),  # most text\n  axis.text        = element_text(color = \"grey60\"), # axis label text\n  axis.line        = element_line(color = \"grey60\"), # x and y axes\n  plot.background  = element_rect(fill = \"black\"),   # main background\n  panel.background = element_blank(),                # defaults to plot background fill\n  panel.grid       = element_blank()                 # get rid of gridlines\n)\n\n# plot with custom theme\nggplot(diamonds, aes(carat, price, color = cut)) +\n  geom_smooth() + \n  mytheme"},{"path":"advanced-plots-1.html","id":"advanced-plots-1","chapter":"C Advanced Plots","heading":"C Advanced Plots","text":"","code":""},{"path":"advanced-plots-1.html","id":"easter-egg---overlaying-plots","chapter":"C Advanced Plots","heading":"C.1 Easter Egg - Overlaying Plots","text":"Hopefully materials shown , found ways presenting data informative manner - example, shown violin plots can effective, combined boxplots, displaying distributions. However, familiar software may used seeing sort information displayed differently, perhaps histogram normal curve overlaid. Whist violin plots better convey information thought might help see alternative approaches . Really overlaying plots already shown, slight adjustments. example, lets look histogram density plot reaction times saw earlier - shown side side convenience.Now fairly informative perhaps takes lot room one option using features patchwork library inset density plot top right histogram. already showed little patchwork earlier repeat placing one figures (density plot) within inset_element() function applying appropriate values position inset - little trial error - based bottom left corner plot area left = 0, bottom = 0, top right corner right = 1, top = 1:\nFigure C.1: Insetting plot within plot using inset_element() patchwork library\ncourse works space inset start overlapping main figure. next approach fully overlays density plot top histogram. one main change though addition aes(y=..density..) within geom_histogram(). tells histogram now plotted terms density count, meaning density plot histogram now based y-axis:\nFigure C.2: histogram density plot overlaid\nmain thing figure histogram density plot based data collected. alternative might want look plotting normal distribution top histogram based mean standard deviation data. bit complicated works follows:\nFigure C.3: histogram normal distribution based data overlaid\nfirst part approach identical say instead using geom_density() using statistics function called stat_function() similar ones saw earlier plotting means standard deviations. stat_function() taking Normal distribution density function, fun = dnorm (read function equals density normal), mean data (mean = mean(dat_long$rt)) standard deviation data sd = sd(dat_long$rt) creates distribution based values. args refers arguments dnorm function takes, passed function list (list()). , can start alter linetype, color, thickness (lwd = 3 example) please.\nFigure C.4: Changing line stat_function()\n","code":"\na <- ggplot(dat_long, aes(x = rt)) +\n  geom_histogram(binwidth = 10, fill = \"white\", color = \"black\") +\n  scale_x_continuous(name = \"Reaction time (ms)\") +\n  labs(subtitle = \"+ geom_histogram()\")\n\nb <- ggplot(dat_long, aes(x = rt)) +\n  geom_density()+\n  scale_x_continuous(name = \"Reaction time (ms)\") +\n  labs(subtitle = \"+ geom_density()\")\n\na+b\na <- ggplot(dat_long, aes(x = rt)) +\n  geom_histogram(binwidth = 10, fill = \"white\", color = \"black\") +\n  scale_x_continuous(name = \"Reaction time (ms)\")\n\nb <- ggplot(dat_long, aes(x = rt)) +\n  geom_density()+\n  scale_x_continuous(name = \"Reaction time (ms)\")\n\na + inset_element(b, left = 0.6, bottom = 0.6, right = 1, top = 1)\nggplot(dat_long, aes(x = rt)) +\n  geom_histogram(aes(y = ..density..),\n                 binwidth = 10, fill = \"white\", color = \"black\") +\n  geom_density()+\n  scale_x_continuous(name = \"Reaction time (ms)\")\nggplot(dat_long, aes(rt)) +\n  geom_histogram(aes(y = ..density..),\n                 binwidth = 10, fill = \"white\", color = \"black\") +\n  stat_function(\n    fun = dnorm, \n    args = list(mean = mean(dat_long$rt), \n                sd = sd(dat_long$rt))\n  )\nggplot(dat_long, aes(rt)) +\n  geom_histogram(aes(y = ..density..),\n                 binwidth = 10, fill = \"white\", color = \"black\") +\n  stat_function(\n    fun = dnorm, \n    args = list(mean = mean(dat_long$rt), \n                sd = sd(dat_long$rt)),\n    color = \"red\",\n    lwd = 3,\n    linetype = 2\n  )"},{"path":"advanced-plots-1.html","id":"easter-egg---a-dumbbell-plot","chapter":"C Advanced Plots","heading":"C.2 Easter Egg - A Dumbbell Plot","text":"nice way representing change across different conditions, within participants across timepoints, dumbbell chart. figures can lot heavy lifting conveying patterns within data hard create ggplot might first appear. premise need start point, terms x (x =) y (y =), end point, terms x (xend =) y (yend =). draw line two points using geom_segment() add data point ends line using geom_point(). example, use average accuracy scores word non-word conditions, monolingual bilinguals, demonstrate. figure participants 100 participants can bit wild. first need create averages using little bit data wrangling seen:data looks follows:**. now can create dumbbell plot follows:\nFigure C.5: dumbbell plot change Average Accuracy Non-word trials (red dots) Word trials (blue dots) monolingual bilingual participants.\nactually gives least exciting figure ever groups showed change non-word trials (red dots) word trials (blue dots) can break code bit just highlight , remembering idea layers. Layers one two add basic background black line start point (x,y), mean accuracy non-word trials two conditions, end point (xend, yend), mean accuracy word trials two conditions:\nFigure C.6: Building bars dumbbells. (x,y) (xend, yend) added show values need consider enter create dumbbell\nremaining lines add dots end dumbells changes x axis label something useful:\nFigure C.7: Adding weights dumbbells. Red dots added one layer show Average Accuracy Non-word trials, blue dots added final layer show Average Accuracy Word trials.\ncourse, worth remembering, better always think dumbbell start end point, left right, accuracy gone moving Non-word trials Word trials bars run opposite direction. repeat process using reaction times instead accuracy see mean.","code":"\ndat_avg <- dat %>%\n  group_by(language) %>%\n  summarise(mean_acc_nonword = mean(acc_nonword),\n            mean_acc_word = mean(acc_word)) %>%\n  ungroup()\nggplot(dat_avg) +\n  geom_segment(aes(x = mean_acc_nonword, y = language,\n                   xend = mean_acc_word, yend = language)) +\n  geom_point(aes(x = mean_acc_nonword, y = language), color = \"red\") +\n  geom_point(aes(x = mean_acc_word, y = language), color = \"blue\") +\n  labs(x = \"Change in Accuracy\")"},{"path":"advanced-plots-1.html","id":"easter-egg---a-pie-chart","chapter":"C Advanced Plots","heading":"C.3 Easter Egg - A Pie Chart","text":"Pie Charts best form visualisation generally require people compare areas /angles fairly unintuitive means comparison. disliked many fields ggplot actually geom_...() function create one. , always somebody wants create pie chart regardless judge. code produce pie chart demographic data saw start paper:\nFigure C.8: pie chart demographics\nNote effectively creating stacked bar chart x variable (.e. x = \"\") wrapping y-axis circle (.e. coord_polar(\"y\", start = 0)). first three lines ggplot() code :\nFigure C.9: basis pie chart\nremainder code used remove various panel tick lines, text, setting element_blank() theme() functions saw , add new labelling text top pie chart specific y-values (.e. y = c(75,25)). remember, friends let friends make pie charts!","code":"\ncount_dat <- dat %>%\n  group_by(language) %>%\n  count() %>%\n  ungroup() %>%\n  mutate(percent = (n/sum(n)*100))\n\nggplot(count_dat, aes(x = \"\", \n                      y = percent, \n                      fill = language)) +\n  geom_bar(width = 1, stat=\"identity\") + \n  coord_polar(\"y\", start = 0) +\n  theme(\n    axis.title = element_blank(),\n    panel.grid = element_blank(),\n    panel.border = element_blank(),\n    axis.ticks = element_blank(),\n    axis.text.x = element_blank()\n  ) +\n  geom_text(aes(y = c(75, 25), \n                label = paste(percent, \"%\")),\n            size = 6)"},{"path":"advanced-plots-1.html","id":"easter-egg---a-lollipop-plot","chapter":"C Advanced Plots","heading":"C.4 Easter Egg - A Lollipop Plot","text":"Lollipop plots sweet alternative pie charts representing relative counts. combination geom_linerange() geom_point(). Use coord_flip() make horizontal.\nFigure 6.5: lollipop plot showing number different types pets.\n","code":"\npets <- c(\"cats\", \"dogs\", \"ferrets\", \"fish\", \"hamsters\", \"snakes\")\nprob <- c(50, 50, 20, 30, 20, 15)\ntibble(pet = sample(pets, 500, TRUE, prob) %>% factor(rev(pets))) %>%\n  count(pet) %>%\n  ggplot(aes(x = pet)) +\n  geom_linerange(mapping = aes(ymin = 0, ymax = n),\n                 size = 2) +\n  geom_point(mapping = aes(y = n, colour = pet), \n             shape = 21, \n             size = 8, \n             stroke = 4,\n             fill = \"white\", \n             show.legend = FALSE) +\n  geom_text(aes(label = pet), \n            y = 1, hjust = 0, size = 6, \n            position = position_nudge(x = 0.3)) +\n  scale_x_discrete(labels = NULL) +\n  theme(axis.ticks.y = element_blank()) +\n  scale_colour_viridis_d() +\n  labs(x = \"\", y = \"\") +\n  coord_flip(ylim = c(0, 200)) +\n  theme_light()"},{"path":"license.html","id":"license","chapter":"License","heading":"License","text":"book licensed Creative Commons Attribution-ShareAlike 4.0 International License (CC--SA 4.0). free share adapt book. must give appropriate credit, provide link license, indicate changes made. adapt material, must distribute contributions license original.","code":""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
